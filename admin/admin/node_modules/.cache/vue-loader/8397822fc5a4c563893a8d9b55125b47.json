{"remainingRequest":"E:\\GraduateDesign\\admin\\admin\\node_modules\\_vue-loader@15.10.1@vue-loader\\lib\\index.js??vue-loader-options!E:\\GraduateDesign\\admin\\admin\\src\\views\\modules\\examquestion\\add-or-update.vue?vue&type=template&id=057f7242&","dependencies":[{"path":"E:\\GraduateDesign\\admin\\admin\\src\\views\\modules\\examquestion\\add-or-update.vue","mtime":1683540029246},{"path":"E:\\GraduateDesign\\admin\\admin\\node_modules\\_cache-loader@4.1.0@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\GraduateDesign\\admin\\admin\\node_modules\\_cache-loader@4.1.0@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\GraduateDesign\\admin\\admin\\node_modules\\_babel-loader@8.3.0@babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\GraduateDesign\\admin\\admin\\node_modules\\_vue-loader@15.10.1@vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\GraduateDesign\\admin\\admin\\node_modules\\_cache-loader@4.1.0@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\GraduateDesign\\admin\\admin\\node_modules\\_vue-loader@15.10.1@vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}